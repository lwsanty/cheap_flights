package main

import (
	"flights/api_client"
	"fmt"
	tb "gopkg.in/tucnak/telebot.v2"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
)

const (
	maxResults = 5

	helpText = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∂–∏–ª–æ–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤. " +
		"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∏–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ \"–ö–∏–µ–≤ –¢–∞–ª–ª–∏–Ω\" –∏–ª–∏ \"–ò–∑ –ö–∏–µ–≤–∞ –≤ –¢–∞–ª–ª–∏–Ω\""

	waitingGif = "https://media.giphy.com/media/tXL4FHPSnVJ0A/giphy.gif"
)

func main() {
	b, err := tb.NewBot(tb.Settings{
		Token:  os.Getenv("API_TOKEN"),
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Println("failed to acquire bot:", err)
		os.Exit(1)
	}

	send := func(user *tb.User, text string) {
		if _, err := b.Send(user, text); err != nil {
			log.Println("failed to send message:", err)
		}
	}

	b.Handle("/start", func(m *tb.Message) {
		send(m.Sender, helpText)
	})

	b.Handle("/help", func(m *tb.Message) {
		send(m.Sender, helpText)
	})

	b.Handle(tb.OnUserJoined, func(m *tb.Message) {
		send(m.Sender, helpText)
	})

	b.Handle(tb.OnText, func(m *tb.Message) {
		src, dst, err := api_client.GetSrcDstIATAs(m.Text)
		if err != nil {
			log.Println("failed to get src and dst:", err)
			send(m.Sender, "üî¥ –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö")
			//send(m.Sender, "üî¥ could not retrieve source and destination points")
			return
		}

		IATAResp := fmt.Sprintf("%s ‚û°Ô∏è %s", src.Name, dst.Name)
		send(m.Sender, IATAResp)

		results, err := api_client.GetBestPrices(src, dst)
		if err != nil {
			log.Println("failed to get GetBestPrices:", err)
			send(m.Sender, "üî¥ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
			return
		}

		optionsAmount := len(results)
		if optionsAmount == 0 {
			send(m.Sender, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª")
			return
		}
		send(m.Sender, "–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: "+strconv.Itoa(optionsAmount)+", –ø–æ–∫–∞–∂—É –¥–æ "+strconv.Itoa(maxResults)+" –ª—É—á—à–∏—Ö:")

		// TODO spinner
		waitMessage, err := b.Send(m.Sender, waitingGif)
		if err != nil {
			log.Println("failed to send wait message:", err)
		}

		optionsMessageText := optionsMessage(results)
		if waitMessage != nil {
			err := b.Delete(waitMessage)
			if err != nil {
				log.Println("failed to delete wait message:", err)
			}
		}

		send(m.Sender, optionsMessageText)
	})

	b.Start()
}

func optionsMessage(results []api_client.Result) string {
	var resOpt []string
	for i, res := range results {
		if i == maxResults {
			break
		}

		price := fmt.Sprintf("üí∂ %v ‚ÇΩ", res.Option.Price)
		rate, err := api_client.GetCurrencyRateRubEur()
		if err == nil && rate != 0 {
			price = fmt.Sprintf("üí∂ %.2f ‚Ç¨", rate*res.Option.Price)
		} else {
			log.Println("failed to get currency rate:", err)
		}

		depText := res.Option.DepartDate
		depDay, err := api_client.GetWeekdayFromDate(res.Option.DepartDate)
		if err == nil {
			depText = res.Option.DepartDate + " " + strings.ToLower(depDay.String())
		}

		retText := res.Option.ReturnDate
		retDay, err := api_client.GetWeekdayFromDate(res.Option.ReturnDate)
		if err == nil {
			retText = res.Option.ReturnDate + " " + strings.ToLower(retDay.String())
		}

		resOpt = append(resOpt, strings.Join([]string{
			price,
			fmt.Sprintf("üõ´ %v", depText),
			fmt.Sprintf("üõ¨ %v", retText),
			// fmt.Sprintf("üìè %d km", opt.Distance),
			fmt.Sprintf("üîÑ %d", res.Option.NumberOfChanges),
			"üîé " + res.Option.Site,
			"details: " + res.Link,
		}, "\n"))
	}

	return strings.Join(resOpt, "\n\n")
}
